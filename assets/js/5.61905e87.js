(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{207:function(t,a,r){t.exports=r.p+"assets/img/quic-stack.a95a0d61.png"},208:function(t,a,r){t.exports=r.p+"assets/img/quic-chain-streams.470092ed.png"},218:function(t,a,r){"use strict";r.r(a);var s=r(0),_=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"协议特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议特点"}},[t._v("#")]),t._v(" 协议特点")]),t._v(" "),s("p",[t._v("本章节将从较高的层次来介绍QUIC协议。")]),t._v(" "),s("p",[t._v("下图展示了用作HTTP传输时，HTTP/2(左)和HTTP/3(右)的协议栈对比。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(207),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"基于udp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于udp"}},[t._v("#")]),t._v(" 基于UDP")]),t._v(" "),s("h3",{attrs:{id:"基于udp的传输协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于udp的传输协议"}},[t._v("#")]),t._v(" 基于UDP的传输协议")]),t._v(" "),s("p",[t._v("QUIC是基于UDP之上实现的传输协议。如果你不仔细观察，你会觉得QUIC跟UDP报文差不多。")]),t._v(" "),s("p",[t._v("基于UDP的它可以使用UDP端口号来识别制定机器上的特定服务器。")]),t._v(" "),s("p",[t._v("目前已知的所有QUIC实现都位于用户空间，这使得它相较于内核空间能得到更快速的迭代。")]),t._v(" "),s("h3",{attrs:{id:"跑的起来吗？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#跑的起来吗？"}},[t._v("#")]),t._v(" 跑的起来吗？")]),t._v(" "),s("p",[t._v("有些企业和其他网络设置会阻止53（用于DNS）以外的其他端口上的UDP通信。还有一些网络可能会节流，使得QUIC协议的表现慢于TCP的协议。还存在着更多的未知。")]),t._v(" "),s("p",[t._v("在可预见的将来，所有基于QUIC的传输都可能有一个能够优雅地回退到另一个（基于TCP）的替代方法。Google工程师以前曾提到过协议的故障率将低于10%。")]),t._v(" "),s("h3",{attrs:{id:"会好起来吗？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#会好起来吗？"}},[t._v("#")]),t._v(" 会好起来吗？")]),t._v(" "),s("p",[t._v("如果QUIC被证明确实是互联网世界的一个有益补充，人们也会希望能够正常使用QUIC，公司可能会重新考虑解决这些障碍。近几年中，QUIC的发展取得了进步，在整个Internet上建立和使用QUIC连接的成功率提高了。")]),t._v(" "),s("h2",{attrs:{id:"可靠性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可靠性"}},[t._v("#")]),t._v(" 可靠性")]),t._v(" "),s("p",[t._v("虽然UDP并不是可靠的传输，但QUIC在UDP之上添加了一层来实现可靠性。它提供了数据包的重新传输、拥塞控制、调整传输节奏以及一些TCP中都不存在的特性。")]),t._v(" "),s("p",[t._v("只要保持连接，通过QUIC从一个端点发送的数据迟早会出现在另一端。")]),t._v(" "),s("h2",{attrs:{id:"数据流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据流"}},[t._v("#")]),t._v(" 数据流")]),t._v(" "),s("p",[t._v("与SCTP、SSH和HTTP/2相类似，QUIC在物理连接内具有独立的逻辑流。许多并行的流可以通过单个连接同时传输数据，而不会影响其他流。")]),t._v(" "),s("p",[t._v("连接是两个端点之间的协商设置，类似于TCP连接的工作方式。QUIC连接建立基于UDP端口和IP地址，但是一旦建立，该连接便由其“连接ID”关联。")]),t._v(" "),s("p",[t._v("通过已建立的连接，任何一方都可以创建流并将数据发送到另一端。数据流是按顺序交付的，并且是可靠的，但是不同的流可能是乱序交付的。")]),t._v(" "),s("p",[t._v("QUIC可以对连接和流提供流量控制。")]),t._v(" "),s("p",[t._v("关于"),s("router-link",{attrs:{to:"/quic/QUIC工作原理.html#连接"}},[t._v("连接")]),t._v("和"),s("router-link",{attrs:{to:"/quic/QUIC工作原理.html#数据流"}},[t._v("数据流")]),t._v("的细节请移步。")],1),t._v(" "),s("h2",{attrs:{id:"有序交付"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有序交付"}},[t._v("#")]),t._v(" 有序交付")]),t._v(" "),s("p",[t._v("QUIC可以保证单个数据流的有序交付，但是多个数据流可能会乱序。这也就是说单个数据流的传输是按序的，但是多个数据流中接收方收到的顺序可能与发送方的发送顺序不同。")]),t._v(" "),s("p",[t._v("举个例子：服务器传送流A和B到客户端。流A先传输，然后是流B。在QUIC中，丢包只会影响该包所处的流。如果流A发生了丢包，而流B没有，流B将继续传输直到结束，而流A将会进行丢包重传。但在HTTP/2中这不可能发生。")]),t._v(" "),s("p",[t._v("如下图所示，连通两个QUIC端点的单一连接中的黄色与蓝色的数据流。它们互相独立，所以可能乱序到达，但是每个流内的信息一定是按序可靠到达的。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(208),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"快速握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速握手"}},[t._v("#")]),t._v(" 快速握手")]),t._v(" "),s("h3",{attrs:{id:"快速握手-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快速握手-2"}},[t._v("#")]),t._v(" 快速握手")]),t._v(" "),s("p",[t._v("QUIC提供了0-RTT和1-RTT的连接建立，这也就是说QUIC在最好的情况下不需要额外的往返时间便可以建立新的连接。两者中更快的是0-RTT，仅在在两个主机之间建立国连接且缓存了该连接的秘密时可以使用。")]),t._v(" "),s("h3",{attrs:{id:"早期数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#早期数据"}},[t._v("#")]),t._v(" 早期数据")]),t._v(" "),s("p",[t._v("QUIC允许客户端在0-RTT的情况下直接携带数据。这使得客户端能尽早向对方传送数据，当然也使得服务器能更快地发回数据响应。")]),t._v(" "),s("h2",{attrs:{id:"tls-1-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tls-1-3"}},[t._v("#")]),t._v(" TLS 1.3")]),t._v(" "),s("p",[t._v("QUIC中使用的传输安全性使用TLS 1.3（"),s("a",{attrs:{href:"https://tools.ietf.org/html/rfc8446",target:"_blank",rel:"noopener noreferrer"}},[t._v("RFC 8446"),s("OutboundLink")],1),t._v("），并且永远不会存在任何未加密的QUIC连接。")]),t._v(" "),s("p",[t._v("与旧版TLS版本相比，TLS 1.3具有多个优点，但在QUIC中使用它的主要原因是TLS1.3版本中更改了握手方式，以减少往返次数，从而减少了协议延迟。")]),t._v(" "),s("p",[t._v("Google旧版的QUIC使用了自定义加密的方式。")]),t._v(" "),s("h2",{attrs:{id:"传输层与应用层协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传输层与应用层协议"}},[t._v("#")]),t._v(" 传输层与应用层协议")]),t._v(" "),s("p",[t._v("IETF版QUIC是一个传输层协议，在该协议之上可以运行其他应用层协议。初始的应用层协议是HTTP/3（h3）。")]),t._v(" "),s("p",[t._v("传输层协议支持连接和数据流处理。")]),t._v(" "),s("p",[t._v("在Google的传统QUIC中，传输层与HTTP粘合在一起，将所有功能都放在里面，它是一个更有指向性的“基于UDP传输HTTP/2帧”（send-http/2-frames-over-udp）的协议。")]),t._v(" "),s("h2",{attrs:{id:"quic之上的http协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quic之上的http协议"}},[t._v("#")]),t._v(" QUIC之上的HTTP协议")]),t._v(" "),s("h3",{attrs:{id:"http3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http3"}},[t._v("#")]),t._v(" HTTP3")]),t._v(" "),s("p",[t._v("HTTP层称为HTTP/3，执行HTTP样式的传输，包括使用QPACK进行HTTP标头压缩-与名为HPACK的HTTP/2压缩类似。")]),t._v(" "),s("p",[t._v("HPACK算法依赖于流的有序交付，由于QUIC的流可能乱序，因此无法在未经修改的情况下将其重用于HTTP/3。QPACK可被视作适用于QUIC版本的"),s("a",{attrs:{href:"https://httpwg.org/specs/rfc7541.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("HPACK"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"quic之上的非http协议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#quic之上的非http协议"}},[t._v("#")]),t._v(" QUIC之上的非HTTP协议")]),t._v(" "),s("p",[t._v("基于QUIC传输非HTTP协议的相关工作已被推迟到第一版QUIC发布之后实现。")])])}),[],!1,null,null,null);a.default=_.exports}}]);